Description: >
    This is an example of a long running ECS service that needs to connect to another ECS service (product-service)
    via it's load balancer. We use environment variables to pass the URL of the product-service to this one's container(s).

Parameters:

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 1

    HttpListener:
        Description: The Application Load Balancer listener to register with
        Type: String

    HttpsListener:
        Description: The Application Load Balancer listener to register with
        Type: String

    DBName:
        Type: String

    DBUser:
        Type: String

    DBURL:
        Type: String

    DBPort:
        Type: String

    RedisHost:
        Type: String

    RedisPort:
        Type: String

    ImageTag:
        Description: The tag to be used
        Type: String

    STACKENV:
        Type: String

    Path:
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /*

Resources:

    Service:
        Type: AWS::ECS::Service
        Properties:
            Cluster: !Ref Cluster
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers:
            -   ContainerName: simple-app
                ContainerPort: '80'
                TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Join ['', [!Ref 'AWS::StackName', -ecs-demo-app]]
            ContainerDefinitions:
                -   Name: simple-app
                    Cpu: '10'
                    Essential: 'true'
                    Image: httpd:2.4
                    Memory: '300'
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref 'CloudwatchLogsGroup'
                            awslogs-region: !Ref 'AWS::Region'
                            awslogs-stream-prefix: ecs-demo-app
                    MountPoints:
                        -   ContainerPath: /usr/local/apache2/htdocs
                            SourceVolume: my-vol
                    PortMappings:
                        -   ContainerPort: 80
                -   Name: busybox
                    Cpu: 10
                    Command: ['/bin/sh -c "while true; do echo ''<html> <head> <title>Amazon ECS EC2
                    Sample App</title> <style>body {margin-top: 40px; background-color: #333;}
                    </style> </head><body> <div style=color:white;text-align:center> <h1>Amazon
                    ECS EC2 Sample App</h1> <h2>Congratulations!</h2> <p>Your application is now
                    running on a container in Amazon ECS.</p>'' > top; /bin/date > date ;
                    echo ''</div></body></html>'' > bottom; cat top date bottom > /usr/local/apache2/htdocs/index.html
                    ; sleep 1; done"']
                    EntryPoint: [sh, -c]
                    Essential: false
                    Image: busybox
                    Memory: 200
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref 'CloudwatchLogsGroup'
                            awslogs-region: !Ref 'AWS::Region'
                            awslogs-stream-prefix: ecs-demo-app
                    VolumesFrom:
                        -   SourceContainer: simple-app
            Volumes:
                -   Name: my-vol

    CloudwatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-499
            HealthCheckPath: /auth/login/
            HealthCheckProtocol: HTTP
            HealthCheckIntervalSeconds: 20
            HealthCheckTimeoutSeconds: 10
            HealthyThresholdCount: 10
            UnhealthyThresholdCount: 10

    # HttpsListenerRule:
    #     Type: AWS::ElasticLoadBalancingV2::ListenerRule
    #     Properties:
    #         ListenerArn: !Ref HttpsListener
    #         Priority: 3
    #         Conditions:
    #             - Field: path-pattern
    #               Values:
    #                 - !Ref Path
    #         Actions:
    #             - TargetGroupArn: !Ref TargetGroup
    #               Type: forward

    HttpListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref HttpListener
            Priority: 3
            Conditions:
                -   Field: path-pattern
                    Values:
                    -   !Ref Path
            Actions:
                -   TargetGroupArn: !Ref TargetGroup
                    Type: forward

    # This IAM Role grants the service access to register/unregister with the
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    ServiceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ecs-service-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                        "Action": [ "sts:AssumeRole" ]
                    }]
                }
            Policies:
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument:
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:Describe*",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                    "elasticloadbalancing:DeregisterTargets",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:RegisterTargets"
                                ],
                                "Resource": "*"
                        }]
                    }
