Description: >
    ECS templates

Parameters:
  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: String
    Default: vpc-56c69433

  PrivateSubnets:
    Type: String
    Default: "subnet-a82766df,subnet-b1e8cbd4"

  PublicSubnets:
    Type: String
    Default: "subnet-972766e0,subnet-b6e8cbd3"

  CertificateARN:
    Type: String
    Default: "arn:aws:acm:us-west-2:202279780353:certificate/21662926-ccb1-4ee9-a026-b266a464eccc"

  StackEnv:
    Type: String
    AllowedValues:
      - qa
      - prod

#database parameters
  MasterUsername:
    Type: String

  MasterUserPassword:
    Type: String
    NoEcho: true

  DBInstanceClass:
    Type: String

  Engine:
    Type: String

  DBName:
    Type: String

  DBInstanceIdentifier:
    Type: String

  DBSize:
    Type: String

  AllocatedStorage:
    Type: Number

Resources:

#Secutiry Group
#Services that allow us to enable trafic through ports/protocols
  STACSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: KEN SG for production enviroment
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Client

#Elastic Load Balancer
#This template enable trafic listeners on ports 80 and 443
#Set a default target group for all listener, but you have to define the target group for each service (see client service)
  STACKELB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/elb.yaml
      Parameters:
        EnvironmentName: !Sub ${AWS::StackName}-Client
        VPC: !Ref VPC
        Subnets: !Ref PublicSubnets
        CertificateArn: !Ref CertificateARN
        SecurityGroup: !Ref STACSG

#Cluster
#This template creates a cluster with custom amis.
  #Scale up +1 instance when:
    #memory +98% for more than 1 minute
    #CPU +90% for more than 1 minute
  #Scale down -1 instance when:
    #memory 45% for more than 3 minutes
    #CPU 40% for more than 1 minute
  #EC2 ROLE ECS ALLOW *
  #Mappings amis, identifier is region specific.
  #LaunchConfiguration is set to the mappings amis
  STACKECS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/ecs.yaml
      Parameters:
        EnvironmentName: !Sub ${AWS::StackName}-client
        InstanceType: !Ref InstanceType
        MaxSize: !Ref ClusterSize
        MinSize: !Ref MinSize
        VPC: !Ref VPC
        SecurityGroup: !Ref CelerySecurityGroup
        Subnets: !Ref PrivateSubnets
        KeyPair: !Ref KeyPair
        Desired: !Ref DesiredSize
        ScaleUpTreshold: 80
        ScaleDownTreshold: 40

#Client service
#this template is for a standar client service in docker.
  ClientService:
    Type: AWS::CloudFormation::Stack
    Properties:
        TemplateURL: https://s3.amazonaws.com/Client.yaml
        Parameters:
          VPC: !Ref VPC
          Cluster: !Ref ECS
          DesiredCount: 2
          HttpListener: !GetAtt STACKELB.Outputs.HttpListener
          HttpsListener: !GetAtt STACKELB.Outputs.HttpsListener
          DBHost: !GetAtt STACKDB.Outputs.DBHost
          DBRegion: !GetAtt STACKDB.Outputs.DBHost

  STACKDB:
    Type: AWS::CloudFormation::Stack
    Properties:
        TemplateURL: https://s3.amazonaws.com/rds.yaml
        Parameters:
          EnvironmentName: !Sub ${AWS::StackName}-client
          VPC: !Ref VPC
          Subnet: !Ref PrivateSubnets
          VPCSecurityGroups: !Ref STACSG
          Engine: !Ref Engine
          DBName: !Ref DBName
          DBInstanceIdentifier: !Ref DBInstanceIdentifier
          MasterUsername: !Ref MasterUsername
          MasterUserPassword: !Ref MasterUserPassword
          DBInstanceClass: !Ref DBInstanceClass
          DBSize: !Ref DBSize
          AllocatedStorage: !Ref AllocatedStorage
